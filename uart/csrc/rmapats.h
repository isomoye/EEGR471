#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct etype ETYPE;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef U  InstNumType;
typedef int InstNumSigned;
typedef InstNumType  InstNum;
typedef U  InstNum32;
typedef unsigned RP;
typedef unsigned RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I641;
    RP  I642;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef unsigned ProcessNum;
typedef unsigned long long TimeStamp64;
typedef U  TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp64  RmaTimeStamp64;
typedef TimeStamp  RmaTimeStamp;
typedef struct {
    int * I643;
    int * I644;
    int I645;
    union {
        long long enumDesc;
        long long classId;
    } I646;
} TypeData;
struct etype {
    U  I4 :8;
    U  I5 :24;
    U  I6;
    U  I7 :1;
    U  I8 :1;
    U  I9 :1;
    U  I10 :1;
    U  I11 :1;
    U  I12 :1;
    U  I13 :1;
    U  I14 :1;
    U  I15 :1;
    U  I16 :4;
    U  I17 :1;
    U  I18 :1;
    U  I19 :1;
    U  I20 :1;
    U  I21 :1;
    U  I22 :1;
    U  I23 :1;
    U  I24 :1;
    U  I25 :2;
    U  I26 :1;
    U  I27 :2;
    U  I28 :1;
    U  I29 :1;
    U  I30 :1;
    U  I31 :1;
    U  I32 :1;
    U  I33 :1;
    TypeData  * I34;
    U  I35;
    U  I36;
    U  I37 :1;
    U  I38 :1;
    U  I39 :1;
    U  I40 :1;
    U  I41 :2;
    U  I42 :2;
    U  I43 :1;
    U  I44 :1;
    U  I45 :1;
    U  I46 :1;
    U  I47 :1;
    U  I48 :1;
    U  I49 :1;
    U  I50 :1;
    U  I51 :1;
    U  I52 :1;
    U  I53 :1;
    U  I54 :1;
    U  I55 :1;
    U  I56 :11;
};
typedef union {
    double I653;
    unsigned long long I654;
    unsigned  I655[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    E_fn  I662;
    struct iptmpl * I663;
    struct eblk * I665;
    unsigned I666;
    struct eblk * I667;
} eblk_struct;
typedef struct {
    RP  I662;
    RP  I663;
    RP  I665;
    unsigned I666;
    RP  I667;
} RmaEblk;
typedef struct {
    RP  I662;
    RP  I663;
    RP  I665;
    unsigned I666;
    RP  I667;
    unsigned val;
} RmaEblklq;
typedef struct _DEblkLaneT {
    struct _DEblkLaneT * I674;
    struct eblk * I676;
} DEblkLaneT;
typedef struct _DEblkPoolT {
    struct _DEblkLaneT * I677;
    struct _DEblkLaneT * I678;
    unsigned I679;
    unsigned I680;
} DEblkPoolT;
typedef union {
    double I653;
    unsigned long long I654;
    unsigned  I655[2];
} clock_struct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I711;
    RmaEblk  I661;
    U  I713;
    US  I714 :1;
    US  I715 :4;
    US  I233 :2;
    US  state :2;
    US  I717 :1;
    US  I718 :2;
    US  I719 :2;
    US  fHsim :1;
    US  I555 :1;
    scalar  newval;
    scalar  I722;
    RP  I723;
};
struct retain_t {
    struct retain_t * I711;
    EBLK  I661;
    U  I713;
    US  I714 :1;
    US  I715 :4;
    US  I233 :2;
    US  state :2;
    US  I717 :1;
    US  I718 :2;
    US  I719 :2;
    US  fHsim :1;
    US  I720 :1;
    scalar  newval;
    scalar  I722;
    void * I723;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I702;
    scalar  I703;
    scalar  I704;
    scalar  I705;
    scalar  fHsim :1;
    scalar  I233 :6;
    U  I707;
    EBLK  I708;
    void * I709;
    UP   I710[1];
};
struct RmaMPSched {
    RP  I702;
    scalar  I703;
    scalar  I704;
    scalar  I705;
    scalar  fHsim :1;
    scalar  I233 :6;
    U  I707;
    RmaEblk  I708;
    RP  I709;
    RP   I710[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I702;
    scalar  I703;
    scalar  I704;
    scalar  I705;
    scalar  I233;
    U  I707;
    RmaEblk  I708;
    scalar  I719;
    scalar  I728;
    scalar  I729;
    scalar  I730;
    U  I731;
    U  I732;
    U  I733;
    U  state;
    U  I734;
    RP  I663;
    RP  I735;
    RP  I736;
    RP   I710[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I738;
    void * I739;
};
typedef struct {
    RmaEblk  I661;
    RP  I740;
    scalar  I741;
    scalar  I719;
    scalar  I742;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I702;
    scalar  I703;
    scalar  I704;
    scalar  I705;
    scalar  fHsim :1;
    scalar  I233 :6;
    U  I707;
    RmaEblk  I708;
    scalar  I719;
    scalar  I728;
    scalar  I729;
    scalar  I730;
    U  state :4;
    U  I744 :28;
    U  I732;
    U  I733;
    RP  I745;
    RP  I663;
    RP  I746;
    RP   I710[1];
};
typedef struct red_t {
    U  I747;
    U  I748;
    U  I619;
} RED;
typedef struct predd {
    PD_e  I233;
    RED   I749[0];
} PREDD;
union rhs_value {
    vec32  I750;
    scalar  I741;
    vec32  * I719;
    double I751;
    U  I752;
};
typedef struct nbs_t {
    struct nbs_t * I753;
    struct nbs_t * I755;
    void (* I756)(struct nbs_t * I723);
    U  I757 :1;
    U  I758 :1;
    U  I759 :1;
    U  I760 :1;
    U  I761 :1;
    U  I762 :1;
    U  I763 :26;
    void * I764;
    U  I765;
    union rhs_value I766;
    vec32  I653;
    union {
        struct nbs_t * I1224;
        struct nbs_t * last;
    } I768;
} NBS;
typedef struct {
    RP  I769;
    RP  I735;
    RP  I663;
    RP  I736;
    RmaEblk  I661;
    RmaEblk  I770;
    RP  I771;
    scalar  I741;
    scalar  I719;
    char state;
    uscope_t  I772;
    U  I773;
    RP  I774;
    scalar  I728;
    scalar  I729;
    scalar  I730;
    U  I732;
    U  I733;
    RP  I709;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I780 :1;
    U  I781 :1;
    U  I782 :1;
    U  I783 :1;
    U  I784 :1;
    U  I785 :1;
    U  I786 :1;
    U  I787 :1;
    U  I788 :1;
    U  I789 :1;
    U  I790 :1;
    U  I791 :1;
    U  I792 :1;
    U  I793 :1;
    U  I794 :1;
    U  I795 :1;
    U  I796 :1;
    U  I797 :1;
    U  I798 :1;
    QIRDModuleType  I799 :2;
    U  I800 :1;
    U  I801 :1;
    U  I802 :1;
    U  I803 :1;
    U  I804 :1;
    U  I805 :1;
    U  I806 :1;
    U  I807 :1;
    U  I808 :1;
    U  I809 :1;
    U  I810 :1;
    U  I811 :1;
    U  I812 :1;
    U  I813 :1;
    U  I814 :1;
    U  I815 :1;
    U  I816 :1;
    U  I817 :1;
    U  I818 :1;
    U  I819 :1;
    U  I820 :1;
    U  I821 :1;
    U  I822 :1;
    U  I823 :1;
    U  I824 :1;
    U  I825 :1;
    U  I826 :1;
    U  I827 :1;
    U  I828 :1;
    U  I829 :1;
    U  I830 :1;
} BitFlags;
typedef struct qird_dbg_flags_s {
    U  I831 :29;
    U  I832 :1;
    U  I833 :1;
    U  I834 :1;
} qird_dbg_flags_t;
typedef struct nlpInfoT {
    U  * I835;
    U  * I836;
    U  * I837;
    UP  * I838;
    UP  * I839;
    UP  * I840;
    UP  * I841;
    char * I842;
    UP  * I843;
    UP  * I844;
    U  * I845;
    UP  * I846;
    UP  * I847;
    UP  * I848;
    UP  * I849;
    UP  * I850;
    UP  * I851;
    UP  * I852;
    UP  * I853;
    UP  * I854;
    UP  * I855;
    UP  * I856;
    UP  * I857;
    UP  * I858;
    UP  * I859;
    char * I860;
    char * I861;
    U  * I862;
    U  * I863;
    U  * I864;
    UP  * I865;
    UP  * I866;
    UP  * I867;
    UP  * I868;
    UP  * I869;
    UP  * I870;
    UP  * I871;
    UP  * I872;
    UP  * I873;
    UP  * I874;
    UP  * I875;
    UP  * I876;
    U  I877;
    U  I878;
    U  I879;
    U  I880;
    U  I881;
    U  I882;
    U  I883;
    U  I884;
    U  I885;
    U  I886;
    U  I887;
    U  I888;
    U  I889;
    U  I890;
    U  I891;
    U  I892;
    U  I893;
    U  I894;
} nlpInfoT;
typedef struct txpInfoT {
    U  I895;
    U  I896;
    void * I897;
    void * I898;
    int (* I899)(void);
    int (* I900)(void);
    void * I901;
    void * I902;
    void * I903;
} txpInfoT;
typedef struct fsimInfoT {
    U  I904;
    U  I905;
    U  * I906;
    U  * I907;
    UP  * I908;
    UP  * I909;
    U  * I910;
    U  * I911;
    U  * I912;
} fsimInfoT;
typedef struct fgpInfoT {
    U  I913;
    U  I914;
    U  * I915;
    U  * I916;
    char * I917;
} fgpInfoT;
typedef struct simProfInfoT {
    U  I918;
    U  I919;
    U  I920;
    U  * I921;
    U  * I922;
    U  * I923;
    U  * I924;
} simProfInfoT;
typedef struct hybridSimInfoT {
    U  I925;
    U  I622;
    U  I926;
    U  I927;
    U  I928;
    void * I929;
    U  * I930;
    struct hybridSimReferrerData * I931;
    struct hybridSimReferrerData * I933;
} hybridSimInfoT;
typedef struct classInfoT {
    void * I934;
    void * I935;
    U  I936;
    U  I937;
    U  I938;
    U  I939;
    UP  I940;
    UP  I941;
} classInfoT;
struct qird {
    US  I58;
    US  I59;
    U  I60;
    U  I61;
    char * I62;
    char * I63;
    U  * I64;
    char * I65;
    char * I66;
    U  I67;
    U  I68;
    struct vcd_rt * I69;
    U  I71;
    struct _vcdOffset_rt * I72;
    U  I74;
    U  I75;
    ETYPE  * I76;
    U  * I77;
    classInfoT  * I78;
    int I79;
    U  I80;
    U  * I81;
    U  * I82;
    UP  I83;
    BitFlags  I84;
    U  I85;
    U  I86;
    U  I87;
    U  I88;
    U  * I89;
    U  I90;
    U  I91;
    U  * I92;
    U  I93;
    U  I94;
    U  I95;
    U  I96;
    U  I97;
    U  I98;
    U  I99;
    U  I100;
    U  * I101;
    U  * I102;
    U  * I103;
    U  I104;
    U  I105;
    U  * I106;
    U  I107;
    U  I108;
    U  I109;
    U  I110;
    U  * I111;
    U  I112;
    U  * I113;
    U  I114;
    U  I115;
    U  I116;
    U  I117;
    U  I118;
    U  I119;
    U  * I120;
    char * I121;
    U  I122;
    U  I123;
    U  I124;
    U  I125;
    U  * I126;
    U  I127;
    U  I128;
    U  I129;
    U  I130;
    UP  * I131;
    U  I132;
    U  I133;
    U  I134;
    U  I135;
    U  I136;
    U  I137;
    U  * I138;
    U  I139;
    U  I140;
    U  * I141;
    U  * I142;
    U  * I143;
    U  * I144;
    U  * I145;
    U  I146;
    U  I147;
    struct taskInfo * I148;
    U  I150;
    U  I151;
    U  I152;
    U  I153;
    int * I154;
    U  * I155;
    UP  * I156;
    U  * I157;
    U  I158;
    U  I159;
    int * I160;
    U  I161;
    U  I162;
    U  I163;
    U  I164;
    U  I165;
    U  I166;
    struct qrefer * I167;
    U  * I169;
    unsigned * I170;
    void * I171;
    U  I172;
    struct classStaticReferData * I173;
    U  I175;
    U  * I176;
    U  I177;
    U  * I178;
    U  I179;
    struct wakeupInfoStruct * I180;
    U  I182;
    U  I183;
    U  I184;
    U  * I185;
    U  I186;
    U  * I187;
    U  * I188;
    U  I189;
    U  I190;
    U  I191;
    U  I192;
    U  * I193;
    U  I194;
    U  I195;
    U  * I196;
    U  I197;
    U  I198;
    U  * I199;
    U  * I200;
    U  * I201;
    U  I202;
    U  I203;
    U  I204;
    U  I205;
    U  I206;
    U  I207;
    struct qdefrefee * I208;
    struct qrefee * I210;
    U  * I212;
    U  * I213;
    int (* I214)(void);
    char * I215;
    U  I216;
    U  I217;
    void * I218;
    void * I219;
    NumLibs_t  I220;
    char * I221;
    U  * I222;
    U  I223;
    U  I224;
    U  I225;
    U  I226;
    U  I227;
    U  * I228;
    U  * I229;
    int I230;
    struct clock_load * I231;
    int I246;
    struct clock_data * I247;
    int I263;
    struct clock_hiconn * I264;
    U  I268;
    U  I269;
    U  I270;
    U  I271;
    U  * I272;
    U  I273;
    U  I274;
    U  * I275;
    U  I276;
    void * I277;
    U  I278;
    U  I279;
    UP  * I280;
    void * I281;
    U  I282;
    UP  * I283;
    U  * I284;
    int (* I285)(void);
    U  * I286;
    UP  * I287;
    U  * I288;
    U  I289 :1;
    U  I290 :31;
    U  I291;
    U  I292;
    UP  * I293;
    U  * I294;
    U  I295 :1;
    U  I296 :1;
    U  I297 :1;
    U  I298 :1;
    U  I299 :28;
    U  I300;
    U  I301;
    U  I302;
    U  I303 :31;
    U  I304 :1;
    UP  * I305;
    UP  * I306;
    fsimInfoT  * I307;
    nlpInfoT  * I308;
    U  I309;
    U  I310;
    UP  * I311;
    UP  * I312;
    UP  * I313;
    UP  * I314;
    struct daidirInfo * I315;
    struct vcs_tftable * I317;
    U  I319;
    UP  * I320;
    UP  * I321;
    U  I322;
    U  I323;
    U  I324;
    UP  * I325;
    U  * I326;
    UP  * I327;
    UP  * I328;
    struct qird_hil_data * I329;
    U  I331;
    U  * I332;
    UP  (* I333)(void);
    UP  (* I334)(void);
    UP  (* I335)(void);
    UP  (* I336)(void);
    UP  (* I337)(void);
    int * I338;
    int (* I339)(void);
    char * I340;
    UP  * I341;
    UP  * I342;
    UP  (* I343)(void);
    int (* I344)(void);
    int * I345;
    int (* I346)(void);
    int * I347;
    char * I348;
    U  * I349;
    U  * I350;
    U  * I351;
    U  * I352;
    void * I353;
    int (* I354)(void);
    U  I355;
    UP  * I356;
    UP  * I357;
    U  I358;
    void * I359;
    U  I360;
    U  I361;
    U  I362;
    U  I363;
    U  I364;
    U  I365;
    char * I366;
    UP  * I367;
    U  * I368;
    U  * I369;
    U  * I370;
    U  I371 :15;
    U  I372 :14;
    U  I373 :1;
    U  I374 :1;
    U  I375 :1;
    U  I376 :3;
    U  I377 :1;
    U  I378 :1;
    U  I379 :17;
    U  I380 :3;
    U  I381 :5;
    U  I382 :1;
    U  I383 :1;
    U  I384;
    qird_dbg_flags_t  I385;
    struct scope * I386;
    U  I388;
    U  I389;
    U  I390;
    U  * I391;
    U  * I392;
    U  * I393;
    U  I394;
    U  I395;
    U  I396;
    U  I397;
    struct pcbt * I398;
    U  I407;
    U  I408;
    U  I409;
    U  I410;
    void * I411;
    void * I412;
    void * I413;
    int I414;
    U  * I415;
    U  I416;
    U  I417;
    U  I418;
    U  I419;
    U  I420;
    U  I421;
    U  I422;
    void * I423;
    UP  * I424;
    U  I425;
    U  I426;
    void * I427;
    U  I428;
    txpInfoT  * I429;
    U  I430;
    U  I431;
    U  I432;
    U  I433;
    U  I434;
    U  I435;
    char * I436;
    U  I437;
    U  * I438;
    U  I439;
    U  * I440;
    U  I441;
    U  I442;
    U  I443;
    U  I444;
    U  I445;
    U  I446;
    U  * I447;
    U  I448;
    U  I449;
    U  * I450;
    U  I451;
    U  I452;
    U  I453;
    U  * I454;
    char * I455;
    U  I456;
    U  I457;
    U  I458;
    simProfInfoT  * I459;
    U  I460;
    U  I461;
    UP  * I462;
    U  I463;
    U  I464;
    U  I465;
    struct cosim_info * I466;
    U  I468;
    U  * I469;
    hybridSimInfoT  * I470;
    U  I471;
    U  * I472;
    U  I473;
    U  I474;
    U  * I475;
    U  I476;
    U  * I477;
    U  I478;
    U  * I479;
    U  I480;
    U  I481;
    U  * I482;
    U  I483;
    U  * I484;
    U  I485;
    U  I486;
    U  * I487;
    struct mhdl_outInfo * I488;
    UP  * I490;
    U  I491;
    UP  * I492;
    U  I493;
    void * I494;
    U  * I495;
    void * I496;
    char * I497;
    U  I498;
    U  * I499;
    char * I500;
    U  I501;
    struct regInitInfo * I502;
    UP  * I504;
    U  * I505;
    char * I506;
    U  I507;
    U  I508;
    U  I509;
    U  I510;
    U  I511;
    U  I512;
    U  I513;
    U  I514;
    UP  * I515;
    U  I516;
    U  I517;
    U  I518;
    U  I519;
    UP  * I520;
    U  I521;
    UP  * I522;
    U  I523;
    U  I524;
    U  I525;
    U  * I526;
    U  I527;
    U  I528;
    U  I529;
    U  * I530;
    U  * I531;
    UP  * I532;
    UP  * I533;
    void * I534;
    UP  I535;
    void * I536;
    void * I537;
    void * I538;
    void * I539;
    void * I540;
    UP  I541;
    U  * I542;
    U  * I543;
    void * I544;
    U  I545 :1;
    U  I546 :31;
    U  I547;
    U  I548;
    U  I549;
    int I550;
    U  I551 :1;
    U  I552 :1;
    U  I553 :1;
    U  I554 :1;
    U  I555 :28;
    void * I556;
    void * I557;
    void * I558;
    void * I559;
    void * I560;
    void * I561;
    void * I562;
    UP  * I563;
    U  * I564;
    U  I565;
    char * I566;
    U  * I567;
    U  * I568;
    U  * I569;
    char * I570;
    int * I571;
    int * I572;
    UP  * I573;
    struct etype * I574;
    U  I575;
    U  I576;
    U  * I577;
    struct etype * I578;
    U  I579;
    U  I580;
    U  I581;
    U  * I582;
    void * I583;
    U  I584;
    U  I585;
    void * I586;
    fgpInfoT  * I587;
    U  I588;
    struct covreg_rt * I589;
    U  I591;
    U  I592;
    U  * I593;
    U  I594;
    U  * I595;
    U  I596;
    U  I597;
    U  * I598;
};
typedef struct pcbt {
    U  * I400;
    UP  I78;
    U  I401;
    U  I402;
    U  I403;
    U  I404;
    U  I405;
    U  I406;
} PCBT;
struct iptmpl {
    QIRD  * I668;
    void * I669;
    void * I670;
    UP  I671;
    UP  I672;
    struct iptmpl * I673[2];
};
typedef unsigned long long FileOffset;
typedef struct _RmaMultiInputTable {
    U  I949 :1;
    U  I950 :1;
    U  I606 :2;
    U  I607 :4;
    U  I608 :5;
    U  I951 :1;
    U  I952 :1;
    U  I953 :1;
    U  I954 :1;
    U  I955 :1;
    U  I956 :1;
    U  I957;
    U  I958;
    U  I255;
    U  I959;
    U  I960 :1;
    U  I961 :31;
    union {
        U  utable;
        U  edgeInputNum;
    } I634;
    U  I962 :4;
    U  I963 :4;
    U  I964 :4;
    U  I965 :4;
    U  I966 :4;
    U  I967 :4;
    U  I968 :1;
    U  I969 :1;
    U  I970 :1;
    U  I971 :1;
    U  I972 :5;
    HsimExprChar  * I973;
    UB  * I974;
    UB  * I975;
    struct _RmaMultiInputTable * I948;
    struct _RmaMultiInputTable * I977;
} RmaMultiInputTable;
typedef struct _HsCgPeriod {
    U  I1027;
    U  I1028;
} HsCgPeriod;
typedef struct {
    U   I1029[2];
    U  I1030 :1;
    U  I1031 :1;
    U  I1032 :8;
    U  I1033 :8;
    U  I1034 :8;
    U  I1035 :4;
    U  I1036 :1;
    U  I1037 :1;
    unsigned long long I1038;
    unsigned long long I1039;
    unsigned long long I1040;
    unsigned long long I1041;
    unsigned long long I1028;
    U  I1027;
    U  I1042;
    U  I1043;
    U  I1044;
    U  I1045;
    U  I1046;
    HsCgPeriod  * I1047[10];
} HsimSignalMonitor;
typedef struct {
    InstNum  I1048;
    FlatNodeNum  I1049;
    U  I983;
    scalar  I1050;
    UB  I1051;
    UB  I1052;
    UB  I1053;
    UB  I1054;
    UB  I1055;
    UB  I1056;
    ULL  I1057;
    U  I1058;
    U  I1059;
    U  I1060;
    U  I1061;
    U  I1062;
    U  I1063;
    U  I1064;
    U  I1065;
    HsimSignalMonitor  * I1066;
    RP  I1067;
    RmaTimeStamp64  I1068;
    U  I1069;
    RmaTimeStamp64  I1070;
    U  I1071;
    UB  I1072 :1;
    UB  I1073 :1;
    UB  I1074 :1;
    RP  I1075;
} HsimNodeRecord;
typedef struct {
    RP  I1083;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RP  I1083;
    RP  I663;
} RmaIbfIp;
typedef struct {
    U  I756;
    InstNum32  I625;
} RmaIbfIpById;
typedef struct {
    U  I666;
    U  val;
} RmaDynamicEblklq;
typedef struct {
    U  I666;
    U  I1084;
} RmaFgpDynamicEblklq;
typedef struct {
    U  val;
} RmaDynamicEblk;
typedef struct {
    U  I649 :28;
    U  I1085 :1;
    U  I1086 :1;
    U  I1087 :1;
    U  I1088 :1;
    U  I1089;
    RP  I1090;
    RP  I1091;
    U   I1092[1];
} RmaDbsedRtlLoads;
typedef struct {
    RP  I1093;
    RP  pfn;
    RP  pcode;
} RmaSeqPrimOutputEblkData;
typedef RP  RCICODE;
typedef struct {
    RmaEblk  I661;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I945;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I945;
    RP  pcode;
    U   I1006[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I661;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I661;
    UB  * I1094;
} SchedSelectGateEblk;
typedef struct {
    RmaEblk  I661;
    RP  I1095;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I661;
    RP  I1094;
    RP  I1095;
    vec32  I1096;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I661;
    RP  I1094;
    RP  I1095;
    vec32   I718[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I661;
    RP  I1094;
    RP  I1095;
    scalar   I1097[1];
} RmaAnySchedECg;
typedef struct {
    U  I1098;
    U  I649;
    U  I983;
    U  I1099;
    RmaIbfIp  * I1100;
    EBLK  I661;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I649;
    U  I657;
    RmaThreadSchedCompiledLoads  * I1101;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I1102;
} RmaRootCbkCg;
typedef struct {
    RP  I1103;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I661;
    RP  I1104;
} RmaForceCbkJmpCg;
typedef struct {
    U  I59;
    U  I657 :31;
    U  I1105 :1;
    vec32  I750;
    U  I1106;
    RP  I1107;
    RP  I1108;
} RmaForceSelectorV;
typedef struct {
    U  I59;
    RmaIbfPcode  I1115;
} RmaNetTypeDriverGate;
typedef struct {
    U  I59;
    U  I602;
    RmaIbfPcode   I1115[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I59;
    RmaIbfPcode  I1115;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I1116;
    U  I1117 :3;
    U  I1118 :1;
    U  I1119 :1;
    U  I958 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I59;
    NBS  I1120;
    RmaIbfPcode  I1116;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    U  state;
    U  I1123;
    RP  I1124;
    scalar  val;
    union {
        U  I641;
        U  I623;
    } I634;
    RP   I1125[1];
};
typedef struct {
    U  I59;
    U  iinput;
    UB  I1127;
    RP  I1128;
} RmaCondOptLoad;
typedef struct {
    U  I59;
    U  iinput;
    UB  I1127;
    RP  I1128;
} RmaMacroStateUpdate;
typedef struct {
    U  I59;
    U  state;
    U  I1129;
    UB  I1127;
    U  * I1130;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I1131;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I1131;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I661;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I661;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I661;
    RP  pcode;
    RP  pfn;
    scalar  I1132;
} RmaSchedDeltaGateCg;
typedef struct {
    RP  pcode;
    RP  pfn;
    RmaDynamicEblk  I661;
    scalar  I1132;
    scalar  I1133;
    scalar  I1134;
    scalar  I555;
} RmaDynamicSchedDeltaGateCg;
typedef struct {
    UB  I1135;
    RP  I1136;
    RP  I1137;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I661;
    RP  pcode;
    U  I983;
    U   I650[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I59;
    RP  I749;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaGateDelay;
typedef struct {
    U  I59;
    RP  I749;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaGateBehavioralDelay;
typedef struct {
    U  I59;
    union {
        RP  I1394;
        RP  I1689;
        RP  I1705;
    } I723;
    RmaIbfPcode  I1116;
} RmaMPDelay;
typedef struct {
    U  I59;
    RmaPulse  I1138;
    RmaIbfPcode  I1116;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I59;
    RmaIbfPcode  I1116;
    RmaMps  I1139;
} RmaMPHybridDelay;
typedef struct {
    U  I59;
    U  I1140;
    RmaIbfPcode  I1116;
    RmaEblk  I708;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I59;
    RmaIbfPcode  I1116;
    RmaMpspNewCsdf  I1141;
} RmaMPPulseDelay;
typedef struct {
    U  I59;
    RmaMpsp  I1141;
    RmaIbfPcode  I1116;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I59;
    RP  I619;
    RmaTransEventHdr  I989;
    RP  I746;
    RmaIbfPcode  I1116;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I59;
    RP  I619;
    RmaTransEventHdr  I989;
    RP  I746;
    RmaIbfPcode  I1116;
} RmaNtcTransDelay;
typedef struct {
    U  I59;
    RP  I619;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I59;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I59;
    RP  I1142;
    RP  I1143;
    RmaTransEventHdr  I989;
    RP  I746;
    RmaIbfPcode  I1116;
} RmaNtcTransDelayRF;
typedef struct {
    U  I59;
    RP  I1142;
    RP  I1143;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I59;
    RP  I1144;
    RmaTransEventHdr  I989;
    RP  I746;
    RmaIbfPcode  I1116;
} RmaICTransDelay;
typedef struct {
    U  I59;
    RP  I1144;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I59;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaICTransZeroDelay;
typedef struct {
    U  I59;
    RP  I749;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaICSimpleDelay;
typedef struct {
    U  I59;
    union {
        RP  psimple;
        RP  I1689;
        RP  I1705;
    } I723;
    RmaIbfPcode  I1116;
} RmaICDelay;
typedef struct {
    U  I59;
    RP  I749;
    RmaEblk  I661;
    RmaIbfPcode  I1116;
} RmaPortDelay;
typedef struct {
    U  I958;
    RP  I1145;
} RmaRtlXEdgesLoad;
typedef struct {
    U  I59;
    RmaRtlXEdgesLoad   I1145[(5)];
    void * I1146;
} RmaRtlXEdgesHdr;
typedef struct {
    U  I59;
    US  I1147;
    US  I1148 :1;
    US  I972 :15;
    RP  I1149;
    RP  I1150;
    RP  I1151;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1152;
    RP  I1153;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I661;
    RP  I1154;
    RP  I1155;
    US  I1156;
    UB  I1157;
    UB  I1158 :2;
    UB  I1159 :2;
    UB  I1160 :1;
    UB  I972 :3;
    U  I622;
    RP  I1161;
    RP   I753[(5)];
    RP   I755[(5)];
    US  I1162;
    US  I1163;
    RP  I1164;
    RemoteDbsedLoad   I1165[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I948;
    struct TableAssign_ * I740;
    U  I59;
    U  I1167 :1;
    U  I1168 :1;
    U  I1169 :2;
    U  I1170 :1;
    U  I641 :8;
    U  I1171 :1;
    U  I1172 :1;
    U  I1173 :1;
    U  I1174 :1;
    U  I1175 :1;
    U  I1176 :1;
    U  I1177 :1;
    U  I1178 :1;
    U  I1179 :1;
    U  I1180 :1;
    U  I972 :9;
    RP  ptable;
    RP  I1131;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I948;
    struct TableAssignLayoutOnClk_ * I740;
    U  I59;
    U  I1167 :1;
    U  I1168 :1;
    U  I1169 :2;
    U  I1170 :1;
    U  I641 :8;
    U  I1171 :1;
    U  I1172 :1;
    U  I1173 :1;
    U  I1174 :1;
    U  I1175 :1;
    U  I1176 :1;
    U  I1177 :1;
    U  I1178 :1;
    U  I1179 :1;
    U  I1180 :1;
    U  I972 :9;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1182;
    RmaEblk  I661;
} TableAssignLayoutOnClk;
typedef struct {
    U  state;
    U  I1183;
} RmaSeqPrimOutputOnClkOpt;
typedef struct TableAssignLayoutOnClkOpt_ {
    struct TableAssignLayoutOnClkOpt_ * I948;
    struct TableAssignLayoutOnClkOpt_ * I740;
    U  I1185;
    U  I1167 :1;
    U  I1168 :1;
    U  I1169 :2;
    U  I1170 :1;
    U  I641 :8;
    U  I1171 :1;
    U  I1172 :1;
    U  I1173 :1;
    U  I1174 :1;
    U  I1175 :1;
    U  I1176 :1;
    U  I1177 :1;
    U  I1178 :1;
    U  I1179 :1;
    U  I1180 :1;
    U  I972 :9;
    RmaSeqPrimOutputOnClkOpt  I1182;
    RmaSeqPrimOutputEblkData  I1186;
} TableAssignLayoutOnClkOpt;
typedef struct {
    U  I59;
    RP  I740;
    RP  I1187;
} RmaTableAssignList;
typedef struct {
    U  I59;
    RP  I740;
    RP  I1187;
    RP  I1188;
    RP  I1124;
    RP  I1189;
    US  I641;
    UB  I1050;
    UB  I1190;
    UB  I1191;
    UB  I714;
    RP   I1192[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1188;
    RP  I1124;
    RP  I1189;
    US  I641;
    UB  I1050;
    UB  I1190;
    UB  I1191;
    UB  I714;
} RmaThreadTableHeader;
typedef struct {
    RP  I1152;
} RmaWakeupListCg;
typedef struct {
    RP  I1152;
} RmaWakeupArrayCg;
typedef struct {
    RP  I1152;
    RP  I1193;
} RmaPreCheckWakeupListCg;
typedef struct {
    RP  I1152;
    RP  I1193;
} RmaPreCheckWakeupArrayCg;
typedef struct {
    U  I1194;
    U  I641;
    RmaTimeStamp   I1195[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1196;
} RmaConditionsMdb;
typedef struct {
    RP  I1197;
    RP  I1198;
    U  I1199;
} RmaTcListHeader;
typedef struct {
    RP  I948;
    RP  I1200;
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I948;
    RP  I1200;
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1212;
} RmaTcCoreConditional;
typedef struct {
    RP  I948;
    RP  I1200;
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1212;
    RP  I1213;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I948;
    RP  I1200;
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1213;
    RP  I1214;
    U  I1215;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1212;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1212;
    RP  I1213;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1213;
    RP  I1214;
    U  I1215;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1213;
    RP  I1214;
    RP  I1125;
    U  I1215;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1212;
    RP  I1125;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    U  I1217;
    RP  I1218;
    RP  I1219;
    RP  I1212;
    RP  I1220;
    RP  I1221;
    RmaTimeStamp  I1222;
} RmaTcCoreNochange;
typedef struct {
    RP  I1223;
    RP  I948;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1201;
    RP  I656;
    U  I1202;
    scalar  I958;
    scalar  I1203;
    US  I1204 :1;
    US  I1205 :1;
    US  I1206 :1;
    US  I1207 :1;
    US  I1208 :1;
    US  I1209 :1;
    US  I1210 :1;
    US  I1211 :5;
    RP  I1212;
    RmaEblk  I661;
    U  I1224;
} RmaTcCoreFullskew;
typedef struct {
    RP  I1225;
    RP  I948;
} RmaTcCoreFullskewList;
typedef struct {
    RP  I1196;
    RmaTimeStamp  I1226;
    scalar  I1227;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I948;
    RP  I1196;
    RmaTimeStamp  I1226;
    scalar  I1227;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1226;
    scalar  I1227;
    US  I958;
    RP  I1213;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I948;
    RmaTimeStamp  I1226;
    scalar  I1227;
    US  I958;
    RP  I1213;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1213;
    RP  I1228;
    U  I1215;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I1125;
    RP  I1213;
    RP  I1228;
    U  I1215;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I948;
    RP  I1213;
    RP  I1228;
    U  I1215;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1229;
    U  I1230;
    FlatNodeNum  I1082;
    U  I983;
    U  I1231;
    U  I1232;
    RmaIbfPcode  I1116;
    union {
        scalar  I1233;
        vec32  I1234;
        scalar  * I1235;
        vec32  * I1236;
    } val;
} RmaScanSwitchData;
typedef struct {
    U  I1229;
    U  I1230;
    U  I983;
    FlatNodeNum  I1082;
    RmaIbfPcode  I1116;
    union {
        scalar  I1233;
        vec32  I1234;
        scalar  * I1235;
        vec32  * I1236;
        double I1237;
    } val;
} RmaRtvsGateData;
typedef struct {
    RP  I948;
    RP  I740;
    RP  I1238;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1239;
    U  I1240 :1;
    U  I1241 :1;
    U  I1242 :1;
    U  I1243 :4;
    U  I1244 :1;
    U  I1074 :1;
    U  I1245 :23;
    U  I1246 :1;
    U  I1247 :31;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1754;
        RmaSwitchGateInCbkListInfo  I2;
    } I634;
    RmaIbfPcode  I1116;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1248;
    scalar  val;
    scalar  I1249 :1;
    scalar  I1250 :1;
    scalar  I1251 :3;
    scalar  I1252 :1;
    scalar  I1253 :1;
    scalar  I1254 :1;
    U  I1255;
    U  I1256;
    RP  I753;
    RP  I1257;
    RP  I1082;
    RP  I1258;
    RP  I1259;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1249;
    UB  I1260;
    UB  I1050;
    RmaNonEdgeLoadData1  * I1145;
    RmaNonEdgeLoadData1  * I740;
    RP  I1164;
    void * I1146;
} RmaNonEdgeLoadHdr1;
typedef struct RmaNonEdgeLoadHdrPrl1_ {
    U  I1261;
    RP  I656;
} RmaNonEdgeLoadHdrPrl1;
typedef struct RmaNonEdgeLoadArrayHdr1_ {
    UB  I1249 :1;
    UB  I1260 :1;
    UB  I1050;
    int I622;
    RmaNonEdgeLoadData1  * I626;
    U  * I1262;
    RP  I1164;
    void * I1146;
} RmaNonEdgeLoadArrayHdr1;
typedef struct RmaNonEdgeLoadDataArray1_ {
    U  I1263;
} RmaNonEdgeLoadDataArray1;
typedef struct RmaChildClockProp_ {
    RP  I753;
    RP  I1264;
    RP  I1082;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1145;
    RmaChildClockProp  * I740;
} RmaChildClockPropList1;
typedef struct {
    UB  I1265;
    UB  I1266 :1;
    UB  I1267 :1;
    UB  I1268 :1;
    UB  I1269 :1;
    UB  I972 :4;
    US  cedges;
    RP  I1270;
} RmaMasterXpropLoadHdr;
typedef struct {
    UB  I1265;
    UB  I1271;
    UB  I1272;
    UB  I1273 :1;
    UB  I1274 :1;
    UB  I972 :6;
    U  cedges;
} RmaXpropLoadHdr;
typedef struct {
    UB  I1271;
    UB  I1272;
    UB  I1275;
    UB  I1276;
    U  cedges :29;
    U  I1267 :1;
    U  I1277 :1;
    U  I1278 :1;
    U  I1279;
    U  I1280;
    RP  I1281;
    RP  I1282;
    RmaRtlEdgeBlockHdr  * I1283;
} RmaChildXpropLoadHdr;
struct clock_load {
    U  I233 :5;
    U  I234 :12;
    U  I235 :1;
    U  I236 :2;
    U  I237 :1;
    U  I238 :1;
    U  I239 :1;
    U  I240 :9;
    U  I241;
    U  I242;
    void (* pfn)(void * I244, char val);
};
typedef struct clock_data {
    U  I249 :1;
    U  I250 :1;
    U  I251 :1;
    U  I252 :1;
    U  I233 :5;
    U  I234 :12;
    U  I253 :6;
    U  I254 :1;
    U  I236 :2;
    U  I237 :1;
    U  I240 :1;
    U  I255;
    U  I256;
    U  I257;
    U  I241;
    U  I258;
    U  I259;
    U  I260;
    U  I261;
    U  I262;
} HdbsClockData;
struct clock_hiconn {
    U  I266;
    U  I267;
    U  I241;
    U  I236;
};
typedef union _RmaCbkMemOptUnion {
    RP  I1284;
    RP  I1285;
    RP  I1286;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1287;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I700;
    U   I701[32];
};
struct futq_slot1 {
    U  I697;
    struct futq_slot2  I698[32];
};
struct futq_info {
    scalar  * I692;
    U  I693;
    U  I694;
    struct futq_slot1  I695[32];
};
struct futq {
    struct futq * I681;
    struct futq * I683;
    RmaEblk  * I684;
    RmaEblk  * I685;
    U  I666;
    U  I1;
    DEblkPoolT  * I686;
};
struct sched_table {
    struct futq * I687;
    struct futq I688;
    struct hash_bucket * I689;
    struct hash_bucket * I691;
};
struct dummyq_struct {
    clock_struct  I1288;
    EBLK  * I1289;
    EBLK  * I1290;
    EBLK  * I1291;
    struct futq * I1292;
    struct futq * I1293;
    struct futq * I1294;
    struct sched_table * I1295;
    struct futq_info * I1297;
    struct futq_info * I1299;
    U  I1300;
    U  I1301;
    U  I1302;
    U  I1303;
    U  I1304;
    U  I1305;
    U  I1306;
    struct millenium * I1307;
    EBLK  * I1309;
    EBLK  * I1310;
    EBLK  * I1311;
    EBLK  * I1312;
    EBLK  * I1313;
    EBLK  * I1314;
    EBLK  * I1315;
    EBLK  * I1316;
    EBLK  * I1317;
    EBLK  * I1318;
    EBLK  * I1319;
    EBLK  * I1320;
    EBLK  * I1321;
    EBLK  * I1322;
    EBLK  * I1323;
    EBLK  * I1324;
    EBLK  * I1325;
    MPS  * I1326;
    struct retain_t * I1327;
    EBLK  * I1328;
    EBLK  * I1329;
    EBLK  * I1330;
    EBLK  * I1331;
    EBLK  * I1332;
    EBLK  * I1333;
    EBLK  * I1334;
    EBLK  * I1335;
    EBLK  * I1336;
    EBLK  * I1337;
    EBLK  * I1338;
    EBLK  * I1339;
    EBLK  * I1340;
    EBLK  * I1341;
    EBLK  * I1342;
    EBLK  * I1343;
    EBLK  * I1344;
    EBLK  * I1345;
    EBLK  * I1346;
    EBLK  * I1347;
    EBLK  * I1348;
    EBLK  * I1349;
    EBLK  * I1350;
    EBLK  * I1351;
    EBLK  * I1352;
    EBLK  * I1353;
    EBLK  I1354;
    EBLK  * I1355;
    EBLK  * I1356;
    int I1357;
    struct vcs_globals_t * I1358;
    U  I1360;
    clock_struct  I1361;
    unsigned long long I1362;
    EBLK  * I1363;
    EBLK  * I1364;
    void * I1365;
    U  semilerOptQueuesFlag;
    U  I1367;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPDP)(void *  , void *  , scalar   );
typedef void (* FPVDP)(void *  , void *  , void *  );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    int I1368;
    struct _lqueue * I711;
    EBLK  * I1370;
    EBLK  * I665;
    DEblkPoolT  * I686;
} Queue;
typedef struct {
    void * I1371;
    void * I1372;
    void * I1373[2];
    void * I1374;
} ClkLevel;
typedef struct {
    unsigned long long I1375;
    EBLK  I1277;
    U  I1376;
    U  I1377;
    union {
        void * pHeap;
        Queue  * pList;
    } I634;
    unsigned long long I1378;
    ClkLevel  I1379;
    Queue   I1380[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern unsigned long long vcs_clocks;
extern unsigned long long ref_vcs_clocks;
extern UB   Xunion[];
extern UB   vcsXunionCg[];
extern UB   vcsXworCg[];
extern UB   vcsXwandCg[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern UP   bepatsFunctionArray[];
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern UP   rmaFunctionHsRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern FP   rmaFunctionFanoutArray[];
extern UB  dummyScalar;
extern UB  fScalarIsForced;
extern UB  fScalarIsReleased;
extern UB  fScalarIsDeposited;
extern U  fNotimingchecks;
extern U  fFsdbDumpOn;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern UB   rmaposEdgeStatusArray[];
extern UB   rmanegEdgeStatusArray[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedNativeVcCgFnPtr;
extern UB  * ptableGbl;
extern U  * vcs_ptableOffsetsGbl;
extern UB  * expandedClkValues;
extern Qhdr  * lvlQueue;
extern unsigned threadIndex;
extern unsigned fBufferingEvent;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern UB  fNettypeIsForced;
extern UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern U  fHsimTcheckOpt;
extern U  fHsimRuntimeSdfOpt;
extern U  fSkipMpTsUpdateOnStr;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;
extern U  rmaProfEvtProp;
extern U  semilerOptQueuesFlag;
extern int semilerOpt;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void hsimDispatchDACbkMemOptNoDynElabS(RP* p, U val, UB* da_byte, U isStrength);
extern U slaveTogglesThisTime;
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void AddToClkGLitchArray(EBLK*);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void vcs_sched0sd_hsim_udpclk(UB* peblk);
extern void vcs_sched0sd_hsim_udpclkopt(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern void sched0lq_de(U* pe, void* ip, void* prout);
extern void sched0lq_hsopt_nonfgp_de(U* pe, void* ip, void* prout);
extern void sched0lq_hsopt_parallel_de(U* pe, void* ip, void* prout);
extern void sched0_de_inl(void* ip, void* prout);
extern void rmaPostDynamicSchedDeltaGate(UB* pcode);
extern U    isRtlClockScheduled(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimCountXEdges(void* record,  scalar s);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEventIC(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void *VCSCalloc(size_t size, size_t count);
extern void *VCSMalloc(size_t size);
extern void VCSFree(void *ptr);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessRtvsSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaSetWInW(vec32* dst, vec32* src, U index, U indexSrc, U width);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip, U offset);
extern void vcs_updateHsimFunc(void* ip, U offset);
extern void unsetHsimFunc(void* ip);
extern U fProfEvtProp;
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsW(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusW(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void levelInsertQueueGL(int);
extern void VcsRciRtl(RP pcode);
extern void VcsRciSCompiledLoad(scalar* pcode, scalar ibnVal);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4, scalar master4val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoadNew(UB* p, US* ea, U flags, UB* plist, UB* pprevlist, scalar v, scalar pv);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U flags, UB* plist, UB* pprevlist, scalar v);
extern void vcsCheckIfClkValValid(U val, U index);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsRmaEvalSeqPrimLoadsByteArraySCT(UB* pcode, UB val, UB prevval4, U c);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr, char val);
extern void vcs_hwcosim_drive_dut_scalar(U id, char val);
extern void vcs_hwcosim_drive_dut_vector_4state(U id, vec32* val);
extern U vcs_rmaGetClkValForSeqUdpLayoutOnClkOpt(UB* poutput);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
#if !defined(__aarch64__)
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
#else
    out = ffs(in) - 1;
#endif
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hs_0_M_0_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_0_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_0_1__simv_daidir (UB  * pcode, scalar  val, U  I611, scalar  * I1408, U  did);
void  hs_0_M_0_2__simv_daidir (UB  * pcode);
void  hs_0_M_1_21__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_0__simv_daidir (UB  * pcode, scalar  val);
void  hs_0_M_1_1__simv_daidir (UB  * pcode, scalar  val, U  I611, scalar  * I1408, U  did);
void  hs_0_M_1_2__simv_daidir (UB  * pcode);
void  hsG_0__0 (struct dummyq_struct * I1393, EBLK  * I1388, U  I619);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

