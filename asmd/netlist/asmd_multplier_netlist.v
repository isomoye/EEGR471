/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "asmd_multiplier.v:1" *)
module asmd_multiplier_netlist (product, ready, word0, word1, start, clk, reset);
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _00_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _01_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _02_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _03_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _04_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _05_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _06_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _07_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _08_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _09_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _10_;
  (* src = "asmd_multiplier.v:9|control_unit.v:13" *)
  wire _11_;
  wire _12_;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:17" *)
  wire [7:0] _13_;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:17" *)
  wire [3:0] _14_;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:17" *)
  wire [7:0] _15_;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:30" *)
  wire [7:0] _16_;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:15" *)
  wire _17_;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:15" *)
  wire _18_;
  wire [3:0] _19_;
  wire [3:0] _20_;
  wire [3:0] _21_;
  wire [7:0] _22_;
  wire [7:0] _23_;
  wire [7:0] _24_;
  wire [7:0] _25_;
  wire [7:0] _26_;
  (* src = "asmd_multiplier.v:8" *)
  wire add_shift;
  (* src = "asmd_multiplier.v:5" *)
  input clk;
  (* src = "asmd_multiplier.v:9|control_unit.v:1" *)
  wire \control_module0.addshift ;
  (* src = "asmd_multiplier.v:9|control_unit.v:3" *)
  wire \control_module0.clk ;
  (* src = "asmd_multiplier.v:9|control_unit.v:2" *)
  wire \control_module0.empty ;
  (* src = "asmd_multiplier.v:9|control_unit.v:1" *)
  wire \control_module0.flush ;
  (* src = "asmd_multiplier.v:9|control_unit.v:1" *)
  wire \control_module0.load_words ;
  (* src = "asmd_multiplier.v:9|control_unit.v:2" *)
  wire \control_module0.m0 ;
  (* src = "asmd_multiplier.v:9|control_unit.v:2" *)
  wire \control_module0.m_is_1 ;
  (* src = "asmd_multiplier.v:9|control_unit.v:4" *)
  wire \control_module0.next_state ;
  (* src = "asmd_multiplier.v:9|control_unit.v:1" *)
  wire \control_module0.ready ;
  (* src = "asmd_multiplier.v:9|control_unit.v:3" *)
  wire \control_module0.reset ;
  (* src = "asmd_multiplier.v:9|control_unit.v:1" *)
  wire \control_module0.shift ;
  (* src = "asmd_multiplier.v:9|control_unit.v:2" *)
  wire \control_module0.start ;
  (* src = "asmd_multiplier.v:9|control_unit.v:4" *)
  reg \control_module0.state ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:5" *)
  wire \datapath_module0.addshift ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:7" *)
  wire \datapath_module0.clk ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:4" *)
  wire \datapath_module0.empty ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:5" *)
  wire \datapath_module0.flush ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:5" *)
  wire \datapath_module0.load_words ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:4" *)
  wire \datapath_module0.m0 ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:4" *)
  wire \datapath_module0.m_is_1 ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:10" *)
  reg [7:0] \datapath_module0.multiplicand ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:11" *)
  reg [3:0] \datapath_module0.multiplier ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:3" *)
  reg [7:0] \datapath_module0.product ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:7" *)
  wire \datapath_module0.reset ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:5" *)
  wire \datapath_module0.shift ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:6" *)
  wire [3:0] \datapath_module0.word0 ;
  (* src = "asmd_multiplier.v:13|datapath_unit.v:6" *)
  wire [3:0] \datapath_module0.word1 ;
  (* src = "asmd_multiplier.v:8" *)
  wire empty;
  (* src = "asmd_multiplier.v:8" *)
  wire flush;
  (* src = "asmd_multiplier.v:8" *)
  wire load_words;
  (* src = "asmd_multiplier.v:8" *)
  wire m0;
  (* src = "asmd_multiplier.v:8" *)
  wire m_is_1;
  (* src = "asmd_multiplier.v:2" *)
  output [7:0] product;
  (* src = "asmd_multiplier.v:3" *)
  output ready;
  (* src = "asmd_multiplier.v:5" *)
  input reset;
  (* src = "asmd_multiplier.v:8" *)
  wire shift;
  (* src = "asmd_multiplier.v:5" *)
  input start;
  (* src = "asmd_multiplier.v:4" *)
  input [3:0] word0;
  (* src = "asmd_multiplier.v:4" *)
  input [3:0] word1;
  always @(posedge clk or posedge reset)
    if (reset)
      \control_module0.state  <= 1'h0;
    else
      \control_module0.state  <= \control_module0.next_state ;
  assign _12_ = ~ (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:22" *) \control_module0.state ;
  assign _06_ = start ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:26" *) _09_ : 1'h0;
  assign _07_ = start ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:26" *) _10_ : 1'h0;
  assign _03_ = reset ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:23" *) 1'h0 : 1'h1;
  assign _01_ = reset ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:23" *) 1'h0 : _06_;
  assign _02_ = reset ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:23" *) 1'h0 : _07_;
  function [0:0] _34_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:39" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _34_ = b[0:0];
      2'b1?:
        _34_ = b[1:1];
      default:
        _34_ = a;
    endcase
  endfunction
  assign \control_module0.next_state  = _34_(1'hx, { _02_, _11_ }, { _12_, \control_module0.state  });
  function [0:0] _35_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:39" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _35_ = b[0:0];
      2'b1?:
        _35_ = b[1:1];
      default:
        _35_ = a;
    endcase
  endfunction
  assign \control_module0.ready  = _35_(1'hx, { _03_, 1'h0 }, { _12_, \control_module0.state  });
  function [0:0] _36_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:39" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _36_ = b[0:0];
      2'b1?:
        _36_ = b[1:1];
      default:
        _36_ = a;
    endcase
  endfunction
  assign \control_module0.flush  = _36_(1'hx, { _01_, 1'h0 }, { _12_, \control_module0.state  });
  function [0:0] _37_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:39" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _37_ = b[0:0];
      2'b1?:
        _37_ = b[1:1];
      default:
        _37_ = a;
    endcase
  endfunction
  assign \control_module0.load_words  = _37_(1'hx, { _02_, 1'h0 }, { _12_, \control_module0.state  });
  function [0:0] _38_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:39" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _38_ = b[0:0];
      2'b1?:
        _38_ = b[1:1];
      default:
        _38_ = a;
    endcase
  endfunction
  assign \control_module0.addshift  = _38_(1'hx, { 1'h0, _00_ }, { _12_, \control_module0.state  });
  function [0:0] _39_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* full_case = 32'd1 *)
    (* src = "asmd_multiplier.v:9|control_unit.v:21|control_unit.v:39" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _39_ = b[0:0];
      2'b1?:
        _39_ = b[1:1];
      default:
        _39_ = a;
    endcase
  endfunction
  assign \control_module0.shift  = _39_(1'hx, { 1'h0, _04_ }, { _12_, \control_module0.state  });
  assign _05_ = \datapath_module0.multiplier [0] ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:45" *) 1'h1 : 1'h0;
  assign _08_ = \datapath_module0.multiplier [0] ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:45" *) 1'h0 : 1'h1;
  assign _11_ = \control_module0.m_is_1  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:40" *) 1'h0 : 1'h1;
  assign _00_ = \control_module0.m_is_1  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:40" *) 1'h1 : _05_;
  assign _04_ = \control_module0.m_is_1  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:40" *) 1'h0 : _08_;
  assign _10_ = \control_module0.empty  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:27" *) 1'h0 : 1'h1;
  assign _09_ = \control_module0.empty  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:9|control_unit.v:27" *) 1'h1 : 1'h0;
  assign _16_ = \datapath_module0.product  + (* src = "asmd_multiplier.v:13|datapath_unit.v:30" *) \datapath_module0.multiplicand ;
  assign \control_module0.m_is_1  = \datapath_module0.multiplier  == (* src = "asmd_multiplier.v:13|datapath_unit.v:14" *) 4'h1;
  assign _17_ = ! (* src = "asmd_multiplier.v:13|datapath_unit.v:15" *) word0;
  assign _18_ = ! (* src = "asmd_multiplier.v:13|datapath_unit.v:15" *) word1;
  assign \control_module0.empty  = _17_ || (* src = "asmd_multiplier.v:13|datapath_unit.v:15" *) _18_;
  always @(posedge clk or posedge reset)
    if (reset)
      \datapath_module0.product  <= 8'h00;
    else
      \datapath_module0.product  <= _15_;
  always @(posedge clk or posedge reset)
    if (reset)
      \datapath_module0.multiplicand  <= 8'h00;
    else
      \datapath_module0.multiplicand  <= _13_;
  always @(posedge clk or posedge reset)
    if (reset)
      \datapath_module0.multiplier  <= 4'h0;
    else
      \datapath_module0.multiplier  <= _14_;
  assign _19_ = \control_module0.shift  ? (* src = "asmd_multiplier.v:13|datapath_unit.v:34" *) { 1'h0, \datapath_module0.multiplier [3:1] } : \datapath_module0.multiplier ;
  assign _20_ = \control_module0.addshift  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:29" *) { 1'h0, \datapath_module0.multiplier [3:1] } : _19_;
  assign _21_ = \control_module0.load_words  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:25" *) word1 : _20_;
  assign _14_ = \control_module0.flush  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:24" *) \datapath_module0.multiplier  : _21_;
  assign _22_ = \control_module0.shift  ? (* src = "asmd_multiplier.v:13|datapath_unit.v:34" *) { \datapath_module0.multiplicand [6:0], 1'h0 } : \datapath_module0.multiplicand ;
  assign _23_ = \control_module0.addshift  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:29" *) { \datapath_module0.multiplicand [6:0], 1'h0 } : _22_;
  assign _24_ = \control_module0.load_words  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:25" *) { 4'h0, word0 } : _23_;
  assign _13_ = \control_module0.flush  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:24" *) \datapath_module0.multiplicand  : _24_;
  assign _25_ = \control_module0.addshift  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:29" *) _16_ : \datapath_module0.product ;
  assign _26_ = \control_module0.load_words  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:25" *) \datapath_module0.product  : _25_;
  assign _15_ = \control_module0.flush  ? (* full_case = 32'd1 *) (* src = "asmd_multiplier.v:13|datapath_unit.v:24" *) 8'h00 : _26_;
  assign add_shift = \control_module0.addshift ;
  assign \control_module0.clk  = clk;
  assign \control_module0.m0  = \datapath_module0.multiplier [0];
  assign \control_module0.reset  = reset;
  assign \control_module0.start  = start;
  assign \datapath_module0.addshift  = \control_module0.addshift ;
  assign \datapath_module0.clk  = clk;
  assign \datapath_module0.empty  = \control_module0.empty ;
  assign \datapath_module0.flush  = \control_module0.flush ;
  assign \datapath_module0.load_words  = \control_module0.load_words ;
  assign \datapath_module0.m0  = \datapath_module0.multiplier [0];
  assign \datapath_module0.m_is_1  = \control_module0.m_is_1 ;
  assign \datapath_module0.reset  = reset;
  assign \datapath_module0.shift  = \control_module0.shift ;
  assign \datapath_module0.word0  = word0;
  assign \datapath_module0.word1  = word1;
  assign empty = \control_module0.empty ;
  assign flush = \control_module0.flush ;
  assign load_words = \control_module0.load_words ;
  assign m0 = \datapath_module0.multiplier [0];
  assign m_is_1 = \control_module0.m_is_1 ;
  assign product = \datapath_module0.product ;
  assign ready = \control_module0.ready ;
  assign shift = \control_module0.shift ;
endmodule
