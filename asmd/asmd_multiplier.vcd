$date
	Thu Oct  3 10:03:52 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module asmd_multiplier_tb $end
$var wire 1 ! ready $end
$var wire 8 " product [7:0] $end
$var reg 1 # clk $end
$var reg 1 $ reset $end
$var reg 1 % start $end
$var reg 4 & word0 [3:0] $end
$var reg 4 ' word1 [3:0] $end
$scope module asmd_multiplier_inst $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 % start $end
$var wire 4 ( word0 [3:0] $end
$var wire 4 ) word1 [3:0] $end
$var wire 1 * shift $end
$var wire 1 ! ready $end
$var wire 8 + product [7:0] $end
$var wire 1 , m_is_1 $end
$var wire 1 - m0 $end
$var wire 1 . load_words $end
$var wire 1 / flush $end
$var wire 1 0 empty $end
$var wire 1 1 add_shift $end
$scope module control_module0 $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var wire 1 % start $end
$var wire 1 , m_is_1 $end
$var wire 1 - m0 $end
$var wire 1 0 empty $end
$var reg 1 1 addshift $end
$var reg 1 / flush $end
$var reg 1 . load_words $end
$var reg 1 2 next_state $end
$var reg 1 ! ready $end
$var reg 1 * shift $end
$var reg 1 3 state $end
$upscope $end
$scope module datapath_module0 $end
$var wire 1 1 addshift $end
$var wire 1 # clk $end
$var wire 1 0 empty $end
$var wire 1 / flush $end
$var wire 1 . load_words $end
$var wire 1 $ reset $end
$var wire 1 * shift $end
$var wire 4 4 word0 [3:0] $end
$var wire 4 5 word1 [3:0] $end
$var wire 1 , m_is_1 $end
$var wire 1 - m0 $end
$var reg 8 6 multiplicand [7:0] $end
$var reg 4 7 multiplier [3:0] $end
$var reg 8 8 product [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 8
b0 7
b0 6
b0 5
b0 4
03
02
01
10
0/
0.
0-
0,
b0 +
0*
b0 )
b0 (
b0 '
b0 &
0%
1$
0#
b0 "
0!
$end
#5
1#
#10
12
1.
00
0/
1!
0#
b11 '
b11 )
b11 5
b11 &
b11 (
b11 4
1%
0$
